{
  "version": 3,
  "sources": ["../../../node_modules/itty-router/dist/itty-router.mjs", "../src/router.ts", "../src/index.ts"],
  "sourceRoot": "dist",
  "sourcesContent": ["const e=({base:e=\"\",routes:r=[]}={})=>({__proto__:new Proxy({},{get:(a,o,t)=>(a,...p)=>r.push([o.toUpperCase(),RegExp(`^${(e+a).replace(/(\\/?)\\*/g,\"($1.*)?\").replace(/(\\/$)|((?<=\\/)\\/)/,\"\").replace(/(:(\\w+)\\+)/,\"(?<$2>.*)\").replace(/:(\\w+)(\\?)?(\\.)?/g,\"$2(?<$1>[^/]+)$2$3\").replace(/\\.(?=[\\w(])/,\"\\\\.\").replace(/\\)\\.\\?\\(([^\\[]+)\\[\\^/g,\"?)\\\\.?($1(?<=\\\\.)[^\\\\.\")}/*$`),p])&&t}),routes:r,async handle(e,...a){let o,t,p=new URL(e.url),l=e.query={};for(let[e,r]of p.searchParams)l[e]=void 0===l[e]?r:[l[e],r].flat();for(let[l,s,c]of r)if((l===e.method||\"ALL\"===l)&&(t=p.pathname.match(s))){e.params=t.groups||{};for(let r of c)if(void 0!==(o=await r(e.proxy||e,...a)))return o}}});export{e as Router};\n", "import { Router } from 'itty-router'\n\n\nconst apiRouter = Router()\n\napiRouter\n    .get('/todos/:id', \n    ({ params }) => ({ message: `You fetched todo #${params.id}` })\n  )\n\nexport default apiRouter;\n", "/**\n * Welcome to Cloudflare Workers! This is your first worker.\n *\n * - Run `npm run dev` in your terminal to start a development server\n * - Open a browser tab at http://localhost:8787/ to see your worker in action\n * - Run `npm run deploy` to publish your worker\n *\n * Learn more at https://developers.cloudflare.com/workers/\n */\n\nimport apiRouter from './router';\n\n// Export a default object containing event handlers\nexport default {\n\t// The fetch handler is invoked when this worker receives a HTTP(S) request\n\t// and should return a Response (optionally wrapped in a Promise)\n\tasync fetch(request: Request, env: Env, ctx: ExecutionContext): Promise<Response> {\n\t\t// You'll find it helpful to parse the request.url string into a URL object. Learn more at https://developer.mozilla.org/en-US/docs/Web/API/URL\n\t\tconst url = new URL(request.url);\n\n\t\t\tif (url.pathname.startsWith('/api/')) {\n\t\t\t// You can also use more robust routing\n\t\t\treturn apiRouter.handle(request);\n\t\t}\n\n\t\treturn new Response(\n\t\t\t`Try making requests to:\n      <ul>\n      <li><code><a href=\"/redirect?redirectUrl=https://example.com/\">/redirect?redirectUrl=https://example.com/</a></code>,</li>\n      <li><code><a href=\"/proxy?modify&proxyUrl=https://example.com/\">/proxy?modify&proxyUrl=https://example.com/</a></code>, or</li>\n      <li><code><a href=\"/api/todos\">/api/todos</a></code></li>`,\n\t\t\t{ headers: { 'Content-Type': 'text/html' } }\n\t\t);\n\t},\n};\n"],
  "mappings": ";AAAA,IAAM,IAAE,CAAC,EAAC,MAAKA,KAAE,IAAG,QAAO,IAAE,CAAC,EAAC,IAAE,CAAC,OAAK,EAAC,WAAU,IAAI,MAAM,CAAC,GAAE,EAAC,KAAI,CAAC,GAAE,GAAE,MAAI,CAACC,OAAK,MAAI,EAAE,KAAK,CAAC,EAAE,YAAY,GAAE,OAAO,KAAKD,KAAEC,IAAG,QAAQ,YAAW,SAAS,EAAE,QAAQ,qBAAoB,EAAE,EAAE,QAAQ,cAAa,WAAW,EAAE,QAAQ,qBAAoB,oBAAoB,EAAE,QAAQ,eAAc,KAAK,EAAE,QAAQ,yBAAwB,wBAAwB,MAAM,GAAE,CAAC,CAAC,KAAG,EAAC,CAAC,GAAE,QAAO,GAAE,MAAM,OAAOD,OAAK,GAAE;AAAC,MAAI,GAAE,GAAE,IAAE,IAAI,IAAIA,GAAE,GAAG,GAAE,IAAEA,GAAE,QAAM,CAAC;AAAE,WAAO,CAACA,IAAEE,EAAC,KAAI,EAAE;AAAa,MAAEF,MAAG,WAAS,EAAEA,MAAGE,KAAE,CAAC,EAAEF,KAAGE,EAAC,EAAE,KAAK;AAAE,WAAO,CAACC,IAAE,GAAE,CAAC,KAAI;AAAE,SAAIA,OAAIH,GAAE,UAAQ,UAAQG,QAAK,IAAE,EAAE,SAAS,MAAM,CAAC,IAAG;AAAC,MAAAH,GAAE,SAAO,EAAE,UAAQ,CAAC;AAAE,eAAQE,MAAK;AAAE,YAAG,YAAU,IAAE,MAAMA,GAAEF,GAAE,SAAOA,IAAE,GAAG,CAAC;AAAG,iBAAO;AAAA,IAAC;AAAC,EAAC;;;ACGjqB,IAAM,YAAY,EAAO;AAEzB,UACK;AAAA,EAAI;AAAA,EACL,CAAC,EAAE,OAAO,OAAO,EAAE,SAAS,qBAAqB,OAAO,KAAK;AAC/D;AAEF,IAAO,iBAAQ;;;ACGf,IAAO,cAAQ;AAAA,EAGd,MAAM,MAAM,SAAkB,KAAU,KAA0C;AAEjF,UAAM,MAAM,IAAI,IAAI,QAAQ,GAAG;AAE9B,QAAI,IAAI,SAAS,WAAW,OAAO,GAAG;AAEtC,aAAO,eAAU,OAAO,OAAO;AAAA,IAChC;AAEA,WAAO,IAAI;AAAA,MACV;AAAA;AAAA;AAAA;AAAA;AAAA,MAKA,EAAE,SAAS,EAAE,gBAAgB,YAAY,EAAE;AAAA,IAC5C;AAAA,EACD;AACD;",
  "names": ["e", "a", "r", "l"]
}
